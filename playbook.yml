---
- name: Create EC2 Instance
  hosts: server
  remote_user: ubuntu
  become: yes
  gather_facts: false
  tasks:
    - name: Create EC2 Instance
      command: >
        aws ec2 run-instances
        --region ap-northeast-2
        --key-name new-key-pem
        --instance-type t2.micro
        --image-id ami-0c9c942bd7bf113a2
        --subnet-id subnet-0397861f148d6e68b
        --security-group-ids sg-0afe369c8a18dcd91
        --associate-public-ip-address
        --count 1
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=My-new-EC2-Instance}]"
      register: ec2_instance
      
    - name: Debug ec2_instance Variable
      debug:
        var: ec2_instance
    
    - name: Wait for EC2 Instance to Start
      ansible.builtin.pause:
        seconds: 10
      delegate_to: localhost

    - name: Wait for SSH Connectivity
      ansible.builtin.wait_for:
        host: "{{ ec2_instance.stdout | from_json | json_query('Instances[0].PublicDnsName') }}"
        port: 22
        state: started
        delay: 10
        timeout: 120
      delegate_to: localhost

    - name: SSH into EC2 Instance
      ansible.builtin.raw: ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/workspace/jenkins-trigger-github/new-key-pem.pem ubuntu@{{ ec2_instance.stdout | from_json | json_query('Instances[0].PublicDnsName') }}
      delegate_to: server
      become: yes
      
    # - name: SSH into EC2 Instance
    #   ansible.builtin.shell: ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/workspace/jenkins-trigger-github/new-key-pem.pem ubuntu@{{ ec2_instance.stdout | from_json | json_query('Instances[0].PublicDnsName') }}
    #   delegate_to: localhost
    #   become: yes

    # - name: Run Command on EC2 Instance
    #   ansible.builtin.command: uptime
    #   args:
    #     ssh_executable: ssh
    #     _uses_shell: yes
    #   register: uptime_output

    # - name: Display Uptime Output
    #   debug:
    #     var: uptime_output.stdout_lines
        
    # - name: Display EC2 Instance Information
    #   ansible.builtin.debug:
    #     var: ec2_instance.instances

    # - name: Set Docker Image Environment Variable abc
    #   set_fact:
    #     docker_image: "tuyetnhung/happy:latest"
    # - name: Update apt cache
    #   become: yes
    #   apt:
    #     update_cache: yes
    # - name: Install required packages
    #   become: yes
    #   apt:
    #     name: ['apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common']    
    # - name: Add Docker GPG key
    #   become: yes
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg

    # - name: Add Docker repository
    #   become: yes
    #   apt_repository:
    #     repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu hirsute stable

    # - name: Install Docker
    #   become: yes
    #   apt:
    #     name: docker-ce
    #     state: present

    # - name: Start and enable Docker service
    #   become: yes
    #   systemd:
    #     name: docker
    #     enabled: yes
    #     state: started

    # - name: Install Docker Compose
    #   become: yes
    #   shell: curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #   args:
    #     creates: /usr/local/bin/docker-compose
    #   register: docker_compose_result

    # - name: Set Docker Compose permissions
    #   become: yes
    #   file:
    #     path: /usr/local/bin/docker-compose
    #     mode: 'u+x,g+x'

    # - name: Pull Docker Image
    #   become: yes
    #   command: docker pull {{ docker_image }}

    # - name: Run a new Docker Container 
    #   become: yes
    #   shell: docker run -d --name my_nginx_container -p 8080:80 {{ docker_image }}




    
...
  
